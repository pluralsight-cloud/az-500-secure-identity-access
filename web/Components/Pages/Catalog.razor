@page "/catalog"
@page "/books"
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Identity.Web
@attribute [Authorize]
@inject IHttpClientFactory HttpClientFactory
@inject ITokenAcquisition TokenAcquisition
@inject IConfiguration Configuration

<title>Catalog - Globalmantics</title>

<section class="section-details">
    <div class="details-left">
        <a href="/"><button>Back</button></a>
    </div>
    <div class="details-right">
        <h2>Our Catalog</h2>
    </div>
</section>

@if (isLoading)
{
    <p><em>Loading books...</em></p>
}
else if (books == null || !books.Any())
{
    <p>No books found.</p>
}
else
{
    <section>
        <div class="table">
            <table>
                <thead>
                    <tr>
                        <th></th>
                        <th>Title</th>
                        <th>Author</th>
                        <th>Published</th>
                        <th>Price</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var book in books)
                    {
                        <tr>
                            <td>
                                <img class="book-image" src="img/@book.Image" alt="@book.Title" />
                            </td>
                            <td class="book-name">@book.Title</td>
                            <td class="book-author">@book.Author</td>
                            <td class="book-date">@book.Published</td>
                            <td class="book-price">$@book.Price</td>
                            <td>
                                <a href="details/@book.Id"><button>Details</button></a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </section>
}

@code {
    private List<Book>? books;
    private bool isLoading = true;
    private string error = string.Empty;
    
    // Local book model definition
    private class Book
    {
        public int Id { get; set; }
        public string Title { get; set; } = string.Empty;
        public string Author { get; set; } = string.Empty;
        public string Image { get; set; } = string.Empty;
        public string Synopsis { get; set; } = string.Empty;
        public int Published { get; set; }
        public decimal Price { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Get the token for the Books API
            string[] scopes = { Configuration["BooksApi:Scopes"]?.Split(' ')[0] };
            string accessToken = await TokenAcquisition.GetAccessTokenForUserAsync(scopes);

            // Create the HTTP client
            var client = HttpClientFactory.CreateClient("BooksApi");
            
            // Add the token to the request
            client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", accessToken);
            
            // Make the request
            books = await client.GetFromJsonAsync<List<Book>>("/books");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading books: {ex.Message}");
            error = ex.Message;
            books = new List<Book>();
        }
        finally
        {
            isLoading = false;
        }
    }
}
