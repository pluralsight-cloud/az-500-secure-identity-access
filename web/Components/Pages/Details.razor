@page "/details/{BookId:int}"
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Identity.Web
@using web.Components.Shared
@inject IHttpClientFactory HttpClientFactory
@inject ITokenAcquisition TokenAcquisition
@inject IConfiguration Configuration
@inject AuthenticationStateProvider AuthenticationStateProvider

<title>Book Details - Globalmantics</title>

<section class="section-details">
    <div class="details-left">
        <a href="/catalog"><button>Back</button></a>
    </div>
</section>

    @if (!isAuthenticated)
    {
        <section class="section-details">
            <div class="details-right">
                <div class="alert alert-warning">Please sign in to view book details</div>
            </div>
        </section>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <section class="section-details">
            <div class="details-right">
                <div class="alert alert-danger">@errorMessage</div>
            </div>
        </section>
    }
    else if (isLoading)
    {
        <section class="section-details">
            <div class="details-right">
                <p><em>Loading book details...</em></p>
            </div>
        </section>
    }
    else if (book != null)
    {
        <section class="section-details">
            <div class="details-left">
                <img class="book-image-details" src="img/@(string.IsNullOrEmpty(book.Image) ? "coming-soon.png" : book.Image)" alt="@book.Title" />
            </div>
            <div class="details-right">
                <h2>@book.Title</h2>
                <div class="book-author">@book.Author</div>
                <div class="book-date">Published: @book.Published</div>
                <div class="book-description">@book.Synopsis</div>
                <div class="book-price-container">
                    <div class="book-price">$@book.Price</div>
                </div>
            </div>
        </section>
        <section class="section-details divider">
        </section>
        <section class="section-details">
            <div class="details-left">
            </div>
            <div class="details-right details-right-purchasing">
                <p>Quantity</p>
                <select name="filter-dropdown">
                    <option selected>1</option>
                    <option>2</option>
                    <option>3</option>
                    <option>4</option>
                </select>
                <div class="book-purchase-button">
                    <a href="#" @onclick="HandleOrderClick"><button>Place Order</button></a>
                </div>
            </div>
        </section>
    }

@code {
    [Parameter]
    public int BookId { get; set; }
    
    private Book? book;
    private bool isLoading = false;
    private string? errorMessage;
    private bool isAuthenticated = false;
    
    // Define the Book model locally
    public class Book
    {
        public int Id { get; set; }
        public string Title { get; set; } = string.Empty;
        public string Author { get; set; } = string.Empty;
        public string Image { get; set; } = string.Empty;
        public string Synopsis { get; set; } = string.Empty;
        public int Published { get; set; }
        public decimal Price { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;

        if (isAuthenticated)
        {
            await LoadBookDetailsAsync();
        }
        else
        {
            errorMessage = "Please sign in to view book details";
        }
    }

    private async Task LoadBookDetailsAsync()
    {
        isLoading = true;
        errorMessage = null;
        
        try
        {
            // Get the token for the Books API
            string[] scopes = { Configuration["BooksApi:Scopes"]?.Split(' ')[0] };
            string accessToken = await TokenAcquisition.GetAccessTokenForUserAsync(scopes);

            // Create the HTTP client
            var client = HttpClientFactory.CreateClient("BooksApi");
            
            // Add the token to the request
            client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", accessToken);
            
            // Get the book details from the API
            book = await client.GetFromJsonAsync<Book>($"/books/{BookId}");
        }
        catch (HttpRequestException ex)
        {
            book = null;
            errorMessage = $"Could not load book details: {ex.Message}";
        }
        catch (Exception ex)
        {
            book = null;
            errorMessage = $"Unexpected error: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
    
    // Method to handle the Place Order button click
    private void HandleOrderClick()
    {
        // This would be implemented to add the book to the shopping cart
        errorMessage = "Order functionality not implemented yet";
    }
}
