@page "/header-component"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider

<header>
    <a href="/"><h1><img src="img/globalmantics-logo-white.png" /></h1></a>
    <div class="navigation-button">
        <a href="/"><button>Home</button></a>
    </div>
    
    @if (isAuthenticated)
    {
        <div class="navigation-button">
            <a href="/catalog"><button>Catalog</button></a>
        </div>
    }
    
    <div class="header-cart">
        <img src="img/cart.svg" />
        <p><span>0</span> books</p>
    </div>
    <div class="header-auth">
        @if (isAuthenticated)
        {
            <a href="/profile" class="header-profile-link">Hello, @userName!</a>
            <a href="/MicrosoftIdentity/Account/SignOut">Sign out</a>
        }
        else
        {
            <a href="/MicrosoftIdentity/Account/SignIn">Sign in</a>
        }
    </div>
</header>

@code {
    private bool isAuthenticated = false;
    private string userName = "User";
    private ClaimsPrincipal? user;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;
        isAuthenticated = user.Identity?.IsAuthenticated ?? false;
        
        if (isAuthenticated)
        {
            userName = GetDisplayName(user);
        }
    }

    private string GetDisplayName(ClaimsPrincipal user)
    {
        // Prefer 'name' claim if present
        var displayName = user.FindFirst("name")?.Value;
        if (!string.IsNullOrEmpty(displayName))
        {
            return displayName;
        }
        // Fallback to UPN or Name
        return user.Identity?.Name ?? "User";
    }
}
